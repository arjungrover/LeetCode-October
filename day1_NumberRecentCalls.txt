/*
Approach 1: using ArrayList

    ArrayList<Integer> list ;
    public RecentCounter() {
        list = new ArrayList<>();
    }
    
    public int ping(int t) {
        list.add(t);
        int sp = t-3000;
        int ep = t;
        int count = 0;
        for(int e:list){
            if(e>=sp && e<=ep)
                count++;
        }
        
        return count;
    }
    
}
*/
/*
Approach 2:
one optimization that we could do is that rather than keeping all the historical ping calls in the container, we could remove the outdated calls on the go, which can avoid the overflow of the container and reduce the memory consumption to the least.

Complexity Analysis:

First of all, let us estimate the upper-bound on the size of our sliding window. Here we quote an important condition from the problem description: "It is guaranteed that every call to ping uses a strictly larger value of t than before." Based on the above condition, the maximal number of elements in our sliding window would be 3000, which is also the maximal time difference between the head and the tail elements.

Time Complexity: 
O(1)

The main time complexity of our ping() function lies in the loop, which in the worst case would run 3000 iterations to pop out all outdated elements, and in the best case a single iteration.

Therefore, for a single invocation of ping() function, its time complexity is 
O(3000)=O(1)

If we assume that there is a ping call at each timestamp, then the cost of ping() is further amortized, where at each invocation, we would only need to pop out a single element, once the sliding window reaches its upper bound.

Space Complexity: 
O(1)

As we estimated before, the maximal size of our sliding window is 3000, which is a constant.

*/

class RecentCounter {
    LinkedList<Integer> list;
    public RecentCounter() {
        list = new LinkedList<>();
    }
    
    public int ping(int t) {
        list.addLast(t);
        while(list.getFirst()<t-3000){
            list.removeFirst();
        }
        
        return list.size();
    }
}

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */